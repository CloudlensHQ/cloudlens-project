/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/scan/aws-cloud-scan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Aws Cloud Scan
         * @description Initiate an AWS cloud security scan with encrypted credentials.
         *
         *     This endpoint accepts encrypted AWS credentials and initiates a comprehensive
         *     security scan across the specified AWS account.
         *
         *     Args:
         *         request: The scan request containing encrypted AWS credentials and configuration
         *         background_tasks: FastAPI background tasks for async processing
         *         db: Database connection
         *
         *     Returns:
         *         ScanResponse: Contains scan ID, status, and other metadata
         *
         *     Raises:
         *         HTTPException: If credentials are invalid or scan initialization fails
         */
        post: operations["aws_cloud_scan_api_scan_aws_cloud_scan_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scan/service-scan-result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Service Scan Result
         * @description Get service scan result data by scan ID, service name, and optional region.
         *
         *     Args:
         *         request: ServiceScanRequest containing scan_id, service_name, and optional region
         *         db: Database connection
         *
         *     Returns:
         *         ServiceScanResponse: Service scan result data
         *
         *     Raises:
         *         HTTPException: If service scan result is not found or error occurs
         */
        post: operations["get_service_scan_result_api_scan_service_scan_result_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scan/scans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Scans
         * @description Get a list of scans with filtering by tenant ID.
         *
         *     Args:
         *         request: ScanListRequest containing tenant_id and optional filters
         *         db: Database connection
         *
         *     Returns:
         *         List[ScanListResponse]: List of scans matching the criteria
         *
         *     Raises:
         *         HTTPException: If there's an error retrieving scans
         */
        post: operations["get_scans_api_scan_scans_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scan/scan-status/{scan_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scan Status
         * @description Get the status of a specific scan.
         *
         *     Args:
         *         scan_id: The unique identifier of the scan
         *         db: Database connection
         *
         *     Returns:
         *         Dict containing scan status and metadata
         *
         *     Raises:
         *         HTTPException: If scan is not found
         */
        get: operations["get_scan_status_api_scan_scan_status__scan_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scan/scan/{scan_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scan
         * @description Get a specific scan by ID with associated service scan results.
         *
         *     Args:
         *         scan_id: The unique identifier of the scan
         *         db: Database connection
         *
         *     Returns:
         *         Dict containing scan details and service scan results
         *
         *     Raises:
         *         HTTPException: If scan is not found
         */
        get: operations["get_scan_api_scan_scan__scan_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/regions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Regions
         * @description Get all regions, optionally filtered by cloud provider.
         *
         *     Args:
         *         cloud_provider: Optional cloud provider filter (AWS, GCP, AZURE, etc.)
         *         db: Database connection
         *
         *     Returns:
         *         List[RegionResponse]: List of regions matching the criteria
         *
         *     Raises:
         *         HTTPException: If there's an error retrieving regions
         */
        get: operations["get_regions_api_regions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/regions/{cloud_provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Regions By Provider
         * @description Get all regions for a specific cloud provider.
         *
         *     Args:
         *         cloud_provider: Cloud provider (AWS, GCP, AZURE, etc.)
         *         db: Database connection
         *
         *     Returns:
         *         List[RegionResponse]: List of regions for the specified cloud provider
         *
         *     Raises:
         *         HTTPException: If there's an error retrieving regions
         */
        get: operations["get_regions_by_provider_api_regions__cloud_provider__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint for health check
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Config
         * @description Get public configuration for the frontend
         */
        get: operations["get_config_api_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AWSCloudScanRequest
         * @description AWS Cloud Scan Request with encrypted credentials
         */
        AWSCloudScanRequest: {
            /** Encrypted Aws Access Key */
            encrypted_aws_access_key: string;
            /** Encrypted Aws Secret Key */
            encrypted_aws_secret_key: string;
            /** Encrypted Aws Session Token */
            encrypted_aws_session_token?: string | null;
            /** Tenant Id */
            tenant_id: string;
            /** Excluded Regions */
            excluded_regions?: string[] | null;
            /**
             * Scan Options
             * @default 840
             */
            scan_options: number | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * RegionResponse
         * @description Region response model
         */
        RegionResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            /** Cloud Provider */
            cloud_provider: string | null;
            /** Created At */
            created_at: string;
            /** Updated At */
            updated_at: string | null;
        };
        /** ScanListRequest */
        ScanListRequest: {
            /** Tenant Id */
            tenant_id: string;
            /** Status */
            status?: string | null;
            /** Cloud Provider */
            cloud_provider?: string | null;
            /**
             * Limit
             * @default 50
             */
            limit: number | null;
            /**
             * Offset
             * @default 0
             */
            offset: number | null;
        };
        /**
         * ScanListResponse
         * @description Scan list response model
         */
        ScanListResponse: {
            /** Scan Id */
            scan_id: string;
            /** Name */
            name: string | null;
            /** Status */
            status: string | null;
            /** Cloud Provider */
            cloud_provider: string | null;
            /** Created By */
            created_by: string | null;
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            } | null;
            /** Created At */
            created_at: string | null;
            /** Updated At */
            updated_at: string | null;
        };
        /**
         * ScanResponse
         * @description Scan response model
         */
        ScanResponse: {
            /** Scan Id */
            scan_id: string;
            /** Message */
            message: string;
            /** Status */
            status: string;
            /** Timestamp */
            timestamp: string;
        };
        /** ServiceScanRequest */
        ServiceScanRequest: {
            /** Scan Id */
            scan_id: string;
            /** Service Name */
            service_name: string;
            /** Region */
            region?: string | null;
        };
        /**
         * ServiceScanResponse
         * @description Service scan result response model
         */
        ServiceScanResponse: {
            /** Id */
            id: string;
            /** Scan Id */
            scan_id: string;
            /** Service Name */
            service_name: string | null;
            /** Region */
            region: string | null;
            /** Scan Result Metadata */
            scan_result_metadata: {
                [key: string]: unknown;
            } | null;
            /** Service Scan Data */
            service_scan_data: {
                [key: string]: unknown;
            } | null;
            /** Created At */
            created_at: string | null;
            /** Updated At */
            updated_at: string | null;
            /** Tenant Id */
            tenant_id: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    aws_cloud_scan_api_scan_aws_cloud_scan_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AWSCloudScanRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_service_scan_result_api_scan_service_scan_result_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceScanRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceScanResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scans_api_scan_scans_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScanListRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanListResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scan_status_api_scan_scan_status__scan_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scan_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scan_api_scan_scan__scan_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scan_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_regions_api_regions__get: {
        parameters: {
            query?: {
                /** @description Filter by cloud provider (AWS, GCP, AZURE, etc.) */
                cloud_provider?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_regions_by_provider_api_regions__cloud_provider__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloud_provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_config_api_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
