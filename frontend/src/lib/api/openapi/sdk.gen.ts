// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AwsCloudScanApiScanAwsCloudScanPostData, AwsCloudScanApiScanAwsCloudScanPostResponses, AwsCloudScanApiScanAwsCloudScanPostErrors, GetServiceScanResultApiScanServiceScanResultPostData, GetServiceScanResultApiScanServiceScanResultPostResponses, GetServiceScanResultApiScanServiceScanResultPostErrors, GetScansApiScanScansPostData, GetScansApiScanScansPostResponses, GetScansApiScanScansPostErrors, GetScanStatusApiScanScanStatusScanIdGetData, GetScanStatusApiScanScanStatusScanIdGetResponses, GetScanStatusApiScanScanStatusScanIdGetErrors, GetScanApiScanScanScanIdGetData, GetScanApiScanScanScanIdGetResponses, GetScanApiScanScanScanIdGetErrors, GetRegionsApiRegionsGetData, GetRegionsApiRegionsGetResponses, GetRegionsApiRegionsGetErrors, GetRegionsByProviderApiRegionsCloudProviderGetData, GetRegionsByProviderApiRegionsCloudProviderGetResponses, GetRegionsByProviderApiRegionsCloudProviderGetErrors, RootGetData, RootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, GetConfigApiConfigGetData, GetConfigApiConfigGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Aws Cloud Scan
 * Initiate an AWS cloud security scan with encrypted credentials.
 *
 * This endpoint accepts encrypted AWS credentials and initiates a comprehensive
 * security scan across the specified AWS account.
 *
 * Args:
 * request: The scan request containing encrypted AWS credentials and configuration
 * background_tasks: FastAPI background tasks for async processing
 * db: Database connection
 *
 * Returns:
 * ScanResponse: Contains scan ID, status, and other metadata
 *
 * Raises:
 * HTTPException: If credentials are invalid or scan initialization fails
 */
export const awsCloudScanApiScanAwsCloudScanPost = <ThrowOnError extends boolean = false>(options: Options<AwsCloudScanApiScanAwsCloudScanPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsCloudScanApiScanAwsCloudScanPostResponses, AwsCloudScanApiScanAwsCloudScanPostErrors, ThrowOnError>({
        url: '/api/scan/aws-cloud-scan',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Service Scan Result
 * Get service scan result data by scan ID, service name, and optional region.
 *
 * Args:
 * request: ServiceScanRequest containing scan_id, service_name, and optional region
 * db: Database connection
 *
 * Returns:
 * ServiceScanResponse: Service scan result data
 *
 * Raises:
 * HTTPException: If service scan result is not found or error occurs
 */
export const getServiceScanResultApiScanServiceScanResultPost = <ThrowOnError extends boolean = false>(options: Options<GetServiceScanResultApiScanServiceScanResultPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetServiceScanResultApiScanServiceScanResultPostResponses, GetServiceScanResultApiScanServiceScanResultPostErrors, ThrowOnError>({
        url: '/api/scan/service-scan-result',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Scans
 * Get a list of scans with filtering by tenant ID.
 *
 * Args:
 * request: ScanListRequest containing tenant_id and optional filters
 * db: Database connection
 *
 * Returns:
 * List[ScanListResponse]: List of scans matching the criteria
 *
 * Raises:
 * HTTPException: If there's an error retrieving scans
 */
export const getScansApiScanScansPost = <ThrowOnError extends boolean = false>(options: Options<GetScansApiScanScansPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetScansApiScanScansPostResponses, GetScansApiScanScansPostErrors, ThrowOnError>({
        url: '/api/scan/scans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Scan Status
 * Get the status of a specific scan.
 *
 * Args:
 * scan_id: The unique identifier of the scan
 * db: Database connection
 *
 * Returns:
 * Dict containing scan status and metadata
 *
 * Raises:
 * HTTPException: If scan is not found
 */
export const getScanStatusApiScanScanStatusScanIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScanStatusApiScanScanStatusScanIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScanStatusApiScanScanStatusScanIdGetResponses, GetScanStatusApiScanScanStatusScanIdGetErrors, ThrowOnError>({
        url: '/api/scan/scan-status/{scan_id}',
        ...options
    });
};

/**
 * Get Scan
 * Get a specific scan by ID with associated service scan results.
 *
 * Args:
 * scan_id: The unique identifier of the scan
 * db: Database connection
 *
 * Returns:
 * Dict containing scan details and service scan results
 *
 * Raises:
 * HTTPException: If scan is not found
 */
export const getScanApiScanScanScanIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScanApiScanScanScanIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScanApiScanScanScanIdGetResponses, GetScanApiScanScanScanIdGetErrors, ThrowOnError>({
        url: '/api/scan/scan/{scan_id}',
        ...options
    });
};

/**
 * Get Regions
 * Get all regions, optionally filtered by cloud provider.
 *
 * Args:
 * cloud_provider: Optional cloud provider filter (AWS, GCP, AZURE, etc.)
 * db: Database connection
 *
 * Returns:
 * List[RegionResponse]: List of regions matching the criteria
 *
 * Raises:
 * HTTPException: If there's an error retrieving regions
 */
export const getRegionsApiRegionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetRegionsApiRegionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRegionsApiRegionsGetResponses, GetRegionsApiRegionsGetErrors, ThrowOnError>({
        url: '/api/regions/',
        ...options
    });
};

/**
 * Get Regions By Provider
 * Get all regions for a specific cloud provider.
 *
 * Args:
 * cloud_provider: Cloud provider (AWS, GCP, AZURE, etc.)
 * db: Database connection
 *
 * Returns:
 * List[RegionResponse]: List of regions for the specified cloud provider
 *
 * Raises:
 * HTTPException: If there's an error retrieving regions
 */
export const getRegionsByProviderApiRegionsCloudProviderGet = <ThrowOnError extends boolean = false>(options: Options<GetRegionsByProviderApiRegionsCloudProviderGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRegionsByProviderApiRegionsCloudProviderGetResponses, GetRegionsByProviderApiRegionsCloudProviderGetErrors, ThrowOnError>({
        url: '/api/regions/{cloud_provider}',
        ...options
    });
};

/**
 * Root
 * Root endpoint for health check
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get Config
 * Get public configuration for the frontend
 */
export const getConfigApiConfigGet = <ThrowOnError extends boolean = false>(options?: Options<GetConfigApiConfigGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigApiConfigGetResponses, unknown, ThrowOnError>({
        url: '/api/config',
        ...options
    });
};